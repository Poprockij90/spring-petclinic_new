Index: src/main/java/org/springframework/samples/petclinic/owner/VisitController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/org/springframework/samples/petclinic/owner/VisitController.java	(revision 23bc97ca264677eb17c57f99d7afeb3234a2df5f)
+++ src/main/java/org/springframework/samples/petclinic/owner/VisitController.java	(date 1550574028006)
@@ -27,9 +27,8 @@
 import org.springframework.web.bind.annotation.*;
 
 import javax.validation.Valid;
-import java.util.ArrayList;
 import java.util.Collection;
-import java.util.Map;
+
 
 /**
  * @author Juergen Hoeller
@@ -55,6 +54,7 @@
         //my for add to list of vets
         this.vets = vets;
     }
+
     @InitBinder("visit")
     public void initPetBinder(WebDataBinder dataBinder) {
         dataBinder.setValidator(new VisitValidator());
@@ -64,10 +64,10 @@
         dataBinder.setDisallowedFields("id");
     }
 
-    @InitBinder
-    public void setAllowedFields(WebDataBinder dataBinder) {
-        dataBinder.setDisallowedFields("id");
-    }
+//    @InitBinder
+//    public void setAllowedFields(WebDataBinder dataBinder) {
+//        dataBinder.setDisallowedFields("id");
+//    }
 
     /**
      * Called before each and every @RequestMapping annotated method.
@@ -79,14 +79,7 @@
      * @param petId
      * @return Pet
      */
-    @ModelAttribute("visit")
-    public Visit loadPetWithVisit(@PathVariable("petId") int petId, Map<String, Object> model) {
-        Pet pet = this.pets.findById(petId);
-        model.put("pet", pet);
-        Visit visit = new Visit();
-        pet.addVisit(visit);
-        return visit;
-    }
+
 
     //my for add to list of vets
     @ModelAttribute("vets")
@@ -95,17 +88,19 @@
     }
 
 
-    //todo mayby change
-    // Spring MVC calls method loadPetWithVisit(...) before initNewVisitForm is called
-//    @GetMapping("/owners/*/pets/{petId}/visits/new")
+
     @GetMapping("/pets/{petId}/visits/new")
-    public String initNewVisitForm(@PathVariable("petId") int petId, Map<String, Object> model) {
+    public String initNewVisitForm(@PathVariable("petId") int petId, ModelMap model) {
+        Pet pet = this.pets.findById(petId);
+        Visit visit = new Visit();
+        pet.addVisit(visit);
+        model.put("pet", pet);
+        model.put("visit", visit);
         return "pets/createOrUpdateVisitForm";
     }
     //todo mayby change
     // Spring MVC calls method loadPetWithVisit(...) before processNewVisitForm is called
     @PostMapping("/pets/{petId}/visits/new")
-//    @PostMapping("/owners/{ownerId}/pets/{petId}/visits/new")
     public String processNewVisitForm(@Valid Visit visit, BindingResult result) {
         if (result.hasErrors()) {
             return "pets/createOrUpdateVisitForm";
@@ -120,33 +115,20 @@
     public String initUpdateForm(@PathVariable("visitId") int visitId,@PathVariable("petId") int petId, ModelMap model) {
         Visit visit = this.visits.findById(visitId);
         model.put("visit", visit);
+        Pet pet=pets.findById(petId);
+        model.put("pet", pet);
         return VIEWS_VISITS_CREATE_OR_UPDATE_FORM;
     }
 
 
 
-
-
-    //todo
-
-//    @PostMapping("/visits/{visitId}/edit")
-//    public String processUpdateForm(@Valid Visit visit, BindingResult result, Pet pet, ModelMap model) {
-//        if (result.hasErrors()) {
-//            visit.setPetId(pet.getId());
-//            model.put("visit", visit);
-//            return VIEWS_VISITS_CREATE_OR_UPDATE_FORM;
-//        } else {
-//            visits.save(visit);
-//            return "redirect:/owners/{ownerId}";
-//        }
-//    }
-
 @PostMapping("/pets/{petId}/visits/{visitId}/edit")
 //    @PostMapping("/owners/{ownerId}/pets/{petId}/visits/new")
-public String editVisit(@Valid Visit visit,@PathVariable("visitId") int visitId ,BindingResult result,Pet pet,Vet vet) {
+public String editVisit(@Valid Visit visit, BindingResult result ,@PathVariable("visitId") int visitId) {
     if (result.hasErrors()) {
         return "pets/createOrUpdateVisitForm";
     } else {
+//        visit.setId(visitId);
         this.visits.save(visit);
         return "redirect:/owners/{ownerId}";
     }
Index: src/main/java/org/springframework/samples/petclinic/visit/VisitValidator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/org/springframework/samples/petclinic/visit/VisitValidator.java	(revision 23bc97ca264677eb17c57f99d7afeb3234a2df5f)
+++ src/main/java/org/springframework/samples/petclinic/visit/VisitValidator.java	(date 1550563948941)
@@ -6,6 +6,7 @@
 import org.springframework.validation.Validator;
 
 public class VisitValidator implements Validator {
+
     private static final String REQUIRED = "required";
 
     @Override
Index: src/main/resources/templates/pets/createOrUpdateVisitForm.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/resources/templates/pets/createOrUpdateVisitForm.html	(revision 23bc97ca264677eb17c57f99d7afeb3234a2df5f)
+++ src/main/resources/templates/pets/createOrUpdateVisitForm.html	(date 1550568941523)
@@ -43,8 +43,15 @@
 
     <div class="form-group">
       <div class="col-sm-offset-2 col-sm-10">
-        <input type="hidden" name="petId" th:value="${pet.id}" />
-        <button class="btn btn-default" type="submit">Add Visit</button>
+
+        <!--<button  class="btn btn-default" type="submit">Add Visit</button>-->
+
+          <!--<button th:with="text=${pet['new']} ? 'Add Pet' : 'Update Pet'"-->
+                  <!--class="btn btn-default" type="submit" th:text="${text}">Add-->
+              <!--Pet</button>-->
+          <button th:with="text=${visit['new']} ? 'Add visit' : 'Update visit'"
+                  class="btn btn-default" type="submit" th:text="${text}" >Add Visit</button>
+
       </div>
     </div>
   </form>
